package main

import "fmt"
import "flag"

// Each new term in the Fibonacci sequence is generated by adding the
// previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.

// ./002 -n 4000000

type Predicate func(n int) bool
type Generator func(n int) int

func isEven(n int) bool  {
  return n%2 == 0
}

func fibonacci(n int) int {

  if n == 0 {
    return 0
  } else if n == 1 {
    return 1
  } else {
    return fibonacci(n - 1) + fibonacci(n - 2)
  }
}

func sum(g Generator, limit int, p Predicate) int {
  sum := 0

  for i := 2;; i++ {

    fib := g(i)

    if fib > limit {
      break

    }

    if p(fib) {
      sum += fib
    }

  }

  return sum
}

func main()  {
  limit := flag.Int("n", 4000000, "the upper limit of fibonacci numbers")
  flag.Parse()

  fmt.Println( sum(fibonacci, *limit, isEven) )

}
